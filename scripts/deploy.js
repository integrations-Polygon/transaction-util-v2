const ethers = require('ethers');
const fs = require('fs');
const hre = require("hardhat");
require('dotenv').config()
const fetch = require('node-fetch');



// env variables 
const privateKey = process.env.SIGNER_PRIVATE_KEY
const projectID = process.env.PROJECT_ID
const network = process.env.NETWORK

async function fetchGasPrice() {
    return (await fetch("https://ethgasstation.info/api/ethgasAPI.json")).json();
}

async function main() {

  // later we can change this to mumbai
  // Configuring the connection to an Rinkeby node
  const provider = new ethers.providers.InfuraProvider(
    network,
    projectID
  );

  // Use your wallet's private key to deploy the contract
  const wallet = new ethers.Wallet(privateKey, provider)

  // Read the contract artifact, which was generated by Hardhat
  const metadata = JSON.parse(fs.readFileSync('./artifacts/contracts/Demo.sol/Demo.json'))

  // Fetch the gas fee estimation from the Polygon Gas Station V2 Endpoint
  const gasData = await fetchGasPrice()
  const gasLimit = 200000;
  const gasInGWEI = gasData.fastest 
  const gasPrice = gasInGWEI * 10**9;

  // Set gas limit and gas price
  const options = {gasLimit: gasLimit, gasPrice: gasPrice}

  // Deploy the contract
  const factory = new ethers.ContractFactory(metadata.abi, metadata.bytecode, wallet)
  const contract = await factory.deploy(options)

  console.log("The contract is being mined...\n")
	console.log(`The gas price being used is ${gasInGWEI} GWEI.`)
	console.log(`The generated transaction hash is ${contract.deployTransaction.hash}.\n`)
	console.log('While your contract is being mined, you can check your transaction at:');
  console.log(`https://rinkeby.etherscan.io/tx/${contract.deployTransaction.hash}\n`)

  // Wait for the contract to get mined
  await contract.deployed()
  console.log(`Deployment successful! Contract Address: ${contract.address}`)
  
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });