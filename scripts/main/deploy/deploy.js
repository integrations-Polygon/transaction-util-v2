const ps = require("prompt-sync")
const prompt = ps()
const fs = require("fs")
require("dotenv").config()
const ethers = require("ethers")
const isNumeric = require("../utils/isNumeric")
const handleDeployTx = require("./handleDeployTx")
const waitForConfirmation = require("../utils/waitForComfirmation")

// env variables
const privateKey = process.env.SIGNER_PRIVATE_KEY
const projectID = process.env.PROJECT_ID
const network = process.env.NETWORK
const walletAddress = process.env.PUBLIC_KEY

const Deployment = async ({ txType, arrayOfArgs, metadata }) => {
  try {
    // Initial non constant variables
    let txHash
    let txReceipt = null
    let retry = 0

    // Using Infura provider to connect to the blockchain
    const provider = new ethers.providers.InfuraProvider(network, projectID)
    
    // Initialize your wallet account address as your signer
    // pKey here is your metamask account private key
    const signer = new ethers.Wallet(privateKey, provider)

    // Retry sending transaction utill success, 5 retries max
    while (txReceipt == null && retry < 5) {
      // Get your nonce value for your wallet address
      const nonce = await provider.getTransactionCount(walletAddress)
      
      // Object consisting all the required data of the user transaction
      // To start the transaction process
      const userTxData = {
        signer,
        txType,
        nonce,
        metadata,
        arrayOfArgs,
        provider,
      }  
      // Passing the user transaction data to begin transaction process
      // and get the transaction hash
      txHash = await handleDeployTx(userTxData)

      console.log("Your contract is being mined...")
      console.log(`The generated transaction hash is ${txHash}.\n`)
      console.log("You can check your transaction at:")
      console.log(`https://polygonscan.com/tx/${txHash}\n`)
      console.log("Waiting for 64 Block Confirmations\n")

      // Wait for confirmation and get the txReceipt or null
      txReceipt = await waitForConfirmation(provider, txHash)
      
      // if the txReceipt generated is null then try resending the transaction
      // max retries 5 untill declared transaction failed and end process
      if (txReceipt === null) {
        retry += 1
        console.log("\nTransaction failed...Trying again!\n")
      }
    }
    // Return the success txReceipt
    if (txReceipt != null) return txReceipt
    console.log("Transaction failed even after 5 retries")

    // Return the failed txReceipt
    return (txReceipt = await provider.getTransactionReceipt(txHash))
  } catch (error) {
    console.log("error in Deployment", error)
    return "error in Deployment"
  }
}

async function deploy() {
  // Empty array to store user input arguments
  let arrayOfArgs = []

  // Basic user input and input checks
  const txType = prompt(
    "Enter the transaction type (1 for legacy || 2 for EIP-1559): "
  )
  if (!txType) return console.log("Transaction type cannot be null")
  if (txType !== "1" && txType !== "2")
    return console.log(`Transaction type ${txType} is unsupported`)
  // Read the contract artifact, which was generated by Hardhat
  const dir = prompt("Enter the smart contract artifact file directory: ")
  if (!dir) return console.log("Contract path cannot be null")
  const metadata = JSON.parse(fs.readFileSync(dir))
  const totalArgs = prompt("Enter the total number of constructor argument: ")
  if (!totalArgs)
    return console.log("Total number of constructor argument cannot be null")
  if (isNumeric(totalArgs) === false) return console.log("Invalid input")
  if (totalArgs !== 0) {
    for (i = 0; i < totalArgs; i++)
      arrayOfArgs[i] = prompt(`Enter your constructor argument [${i + 1}]: `)
  }
  console.log("\nFetching all the necessary data to start mining.\n")
  
  // Stores all the user input data in an object
  const userInputData = { txType, arrayOfArgs, metadata }

  // Pass the user input data object to start the transaction process
  const txReceipt = await Deployment(userInputData)
  
  console.log(
    "\nTo verify your deployed smart contract run:\nnpx hardhat verify",
    txReceipt.contractAddress,
    ...arrayOfArgs
  )
  return txReceipt
}

module.exports = deploy
